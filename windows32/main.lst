Microsoft (R) Macro Assembler Version 11.00.61030.0	    11/17/16 18:50:13
main.asm						     Page 1 - 1


				; General comments
				; Author:  
				; Date: 
				; This is the Visual Studio 2012/Visual C++ Express Edition 2012 version   

				; Preprocessor directives
				.586		; use the 80586 set of instructions
				.MODEL FLAT	; use the flat memory model (only 32 bit addresses, no segment:offset)

				; External source files
				INCLUDE io.h   ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				; Stack configuration
				.STACK 4096	   ; allocate 4096 bytes for the stack

				; Named memory allocation and initialization
 00000000			.DATA
					
 00000000 6D 79 20 64 6F		inputSentence	BYTE "my don dont do that", 0
	   6E 20 64 6F 6E
	   74 20 64 6F 20
	   74 68 61 74 00

 00000014 64 6F 6E 00			searchString	BYTE "don", 0

 00000018 70 6C 61 74 65		replaceString	BYTE "plate", 0
	   00
					
 0000001E  00000064 [			outputSentence	BYTE 100 DUP (0)	; More than 100 characters seems like unreasonable input.
	    00
	   ]
														; We're not writing a novel here.

				; procedure definitions
 00000000			.CODE
 00000000			_MainProc PROC
					
					; while (not at null)
					;	if (current word == search word)
					;		copy replacement word into new sentence
					;	else
					;		copy current word into new sentence
					;	end if
					;	go to next word
					; end while

 00000000  55				push ebp						; save ebp to avoid windows32 bug

					; eax = currentWordLength
					; ebx = inputSentenceIndex
					; ecx = repeatCount
					; edx = outputSentenceIndex

 00000001  8D 1D 00000000 R		lea ebx, inputSentence			; inputSentenceIndex = first element of inputSentence
 00000007  8D 15 0000001E R		lea edx, outputSentence			; outputSentenceIndex = first element of outputSentence

 0000000D			whileNotAtNull:
 0000000D  80 3B 00			cmp BYTE PTR[ebx], 0			; if (inputSentenceIndex == NULL)
 00000010  74 20			je endWhileNotAtNull			; then break the loop

					; get length of current word
 00000012  53				push ebx						; push the start of the current word as parameter: inputSentenceAddr
 00000013  E8 00000021			call wordLength					; currentWordLength (EAX) = wordLength(inputSentenceAddr)
 00000018  5B				pop ebx							; clear parameter off the stack

					; compare current word to searchString
 00000019  8B C8			mov ecx, eax					; repeatCount = currentWordLength
 0000001B  FC				cld								; set scan direction: left-to-right
 0000001C  8B F3			mov esi, ebx					; set source index to inputSentenceIndex
 0000001E  8D 3D 00000014 R		lea edi, searchString			; set destination index to first element of searchString
					
					; repe cmps means:
					; while
					;	if ECX = 0, then break loop
					;	compare [ESI] and [EDI],
					;	increment ESI and EDI
					;	decrement ECX
					;	if [ESI] and [EDI] are the same, then break loop
					; end while
 00000024  F3/ A6			repe cmpsb						; in summary, this will compare the searchString to the current word
													; in inputSentence (starting at inputSentenceIndex).
													; if ECX == 0, that means that the loop did not break early,
													; which means that the two words are the same.
					
 00000026  83 F9 00			cmp ecx, 0						; is ECX 0?
 00000029  74 02			je wordsAreTheSame				; if (ECX == 0), then the words are the same

					; if the words are not the same, copy the current word from inputSentence to outputSentence


 0000002B  EB 00			jmp endWordsAreTheSame
 0000002D			wordsAreTheSame:
					
					
 0000002D			endWordsAreTheSame:
 0000002D  03 D8			add ebx, eax					; inputSentenceIndex += currentWordLength
 0000002F  43				inc ebx							; skip over space

 00000030  EB DB			jmp whileNotAtNull				; loop back
 00000032			endWhileNotAtNull:
					

 00000032  5D				pop ebp							; restore ebp to avoid windows32 bug

 00000033  B8 00000000			mov     eax, 0  ; exit with return code 0
 00000038  C3				ret
 00000039			_MainProc ENDP

				; stringLength(stringAddr)
				; returns the length of a null terminated string
 00000039			wordLength PROC
					
					; set wordStart to stringAddr
					; set wordEnd to stringAddr
					; while (byte at wordEnd != 0)
					;	increment wordEnd
					; end while
					; return (wordEnd - wordStart)
					
					; ebx = wordStart
					; ecx = wordEnd

 00000039  55				push ebp						; save registers we're going to use
 0000003A  8B EC			mov ebp, esp					; copy stack index
 0000003C  53				push ebx
 0000003D  51				push ecx
 0000003E  9C				pushfd							; save flag register

 0000003F  8B 5D 08			mov ebx, DWORD PTR [ebp + 8]	; move stringAddr into wordStart
 00000042  8B CB			mov ecx, ebx					; wordEnd = wordStart
 00000044			whileNotWordEnd:						
 00000044  80 39 00			cmp BYTE PTR[ecx], 0			; wordEnd == NULL?
 00000047  74 08			je endWhileNotWordEnd			; if so, end the while loop
 00000049  80 39 20			cmp BYTE PTR[ecx], ' '			; wordEnd == ' '?
 0000004C  74 03			je endWhileNotWordEnd			; if so, end the while loop

 0000004E  41				inc ecx							; if not, increment wordEnd
 0000004F  EB F3			jmp whileNotWordEnd				; and repeat
 00000051			endWhileNotWordEnd:
					
 00000051  2B CB			sub ecx, ebx					; stringLength = wordEnd - wordStart
					
 00000053  8B C1			mov eax, ecx					; move stringLength into EAX for return value

 00000055  9D				popfd							; restore flag register
 00000056  59				pop ecx							; restore registers we used
 00000057  5B				pop ebx
 00000058  5D				pop ebp
 00000059  C3				ret
 0000005A			wordLength ENDP


				END   ; end of source code
Microsoft (R) Macro Assembler Version 11.00.61030.0	    11/17/16 18:50:13
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000082 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000005A Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000039 Public
  whileNotAtNull . . . . . . . .	L Near	 0000000D _TEXT	
  wordsAreTheSame  . . . . . . .	L Near	 0000002D _TEXT	
  endWordsAreTheSame . . . . . .	L Near	 0000002D _TEXT	
  endWhileNotAtNull  . . . . . .	L Near	 00000032 _TEXT	
wordLength . . . . . . . . . . .	P Near	 00000039 _TEXT	Length= 00000021 Public
  whileNotWordEnd  . . . . . . .	L Near	 00000044 _TEXT	
  endWhileNotWordEnd . . . . . .	L Near	 00000051 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
inputSentence  . . . . . . . . .	Byte	 00000000 _DATA	
outputSentence . . . . . . . . .	Byte	 0000001E _DATA	
replaceString  . . . . . . . . .	Byte	 00000018 _DATA	
searchString . . . . . . . . . .	Byte	 00000014 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
