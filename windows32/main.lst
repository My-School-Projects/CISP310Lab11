Microsoft (R) Macro Assembler Version 11.00.50727.1	    11/17/16 20:34:38
main.asm						     Page 1 - 1


				; General comments
				; Author:  
				; Date: 
				; This is the Visual Studio 2012/Visual C++ Express Edition 2012 version   

				; Preprocessor directives
				.586		; use the 80586 set of instructions
				.MODEL FLAT	; use the flat memory model (only 32 bit addresses, no segment:offset)

				; External source files
				INCLUDE io.h   ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				; Stack configuration
				.STACK 4096	   ; allocate 4096 bytes for the stack

				; Named memory allocation and initialization
 00000000			.DATA
					
 00000000  00000064 [			inputSentence	BYTE 100 DUP (0)	; More than 100 characters seems like unreasonable input.
	    00
	   ]
														; We're not writing a novel here.
														; Limit input and output sentences to 100 characters	
 00000064  00000064 [			outputSentence	BYTE 100 DUP (0)
	    00
	   ]

 000000C8  00000014 [			searchString	BYTE 20 DUP (0)		; Limit search and replace strings to 20 characters
	    00
	   ]

 000000DC  00000014 [			replaceString	BYTE 20 DUP (0)
	    00
	   ]

 000000F0 50 6C 65 61 73		promptInputSentence BYTE "Please input a string to perform search and replace on. Max 100 characters.", 0
	   65 20 69 6E 70
	   75 74 20 61 20
	   73 74 72 69 6E
	   67 20 74 6F 20
	   70 65 72 66 6F
	   72 6D 20 73 65
	   61 72 63 68 20
	   61 6E 64 20 72
	   65 70 6C 61 63
	   65 20 6F 6E 2E
	   20 4D 61 78 20
	   31 30 30 20 63
	   68 61 72 61 63
	   74 65 72 73 2E
	   00

 0000013C 50 6C 65 61 73		promptSearchString	BYTE "Please input a word to search for. Max 20 characters please.", 0
	   65 20 69 6E 70
	   75 74 20 61 20
	   77 6F 72 64 20
	   74 6F 20 73 65
	   61 72 63 68 20
	   66 6F 72 2E 20
	   4D 61 78 20 32
	   30 20 63 68 61
	   72 61 63 74 65
	   72 73 20 70 6C
	   65 61 73 65 2E
	   00

 00000179 50 6C 65 61 73		promptReplaceString BYTE "Please input a word to replace them with. Max 20 characters please.", 0
	   65 20 69 6E 70
	   75 74 20 61 20
	   77 6F 72 64 20
	   74 6F 20 72 65
	   70 6C 61 63 65
	   20 74 68 65 6D
	   20 77 69 74 68
	   2E 20 4D 61 78
	   20 32 30 20 63
	   68 61 72 61 63
	   74 65 72 73 20
	   70 6C 65 61 73
	   65 2E 00

 000001BD 48 65 72 65 20		outputSentenceLabel BYTE "Here is the resulting sentence.", 0
	   69 73 20 74 68
	   65 20 72 65 73
	   75 6C 74 69 6E
	   67 20 73 65 6E
	   74 65 6E 63 65
	   2E 00


				; procedure definitions
 00000000			.CODE
 00000000			_MainProc PROC
					
					; Get inputs!

					input promptInputSentence, inputSentence, 100	; Prompt user for a sentence, max 100 characters
					input promptSearchString, searchString, 20		; Prompt user for a search word, max 20 characters
					input promptReplaceString, replaceString, 20	; Prompt user for a replacement word, max 20 characters

					; while (not at null)
					;	if (current word == search word)
					;		copy replacement word into new sentence
					;	else
					;		copy current word into new sentence
					;	end if
					;	go to next word
					; end while

 0000005A  55				push ebp						; save ebp to avoid windows32 bug

					; eax = currentWordLength
					; ebx = inputSentenceIndex
					; ecx = repeatCount
					; edx = outputSentenceIndex

 0000005B  8D 1D 00000000 R		lea ebx, inputSentence			; inputSentenceIndex = first element of inputSentence
 00000061  8D 15 00000064 R		lea edx, outputSentence			; outputSentenceIndex = first element of outputSentence

 00000067			whileNotAtNull:
 00000067  80 3B 00			cmp BYTE PTR[ebx], 0			; if (inputSentenceIndex == NULL)
 0000006A  74 66			je endWhileNotAtNull			; then break the loop

					; if the lengths of searchString and the current word are different, they are not equal.
 0000006C  52				push edx						; we need an extra variable. save EDX for later
 0000006D  8D 15 000000C8 R		lea edx, searchString
 00000073  52				push edx						; parameter: searchString
 00000074  E8 00000079			call wordLength
 00000079  5A				pop edx							; remove parameter
					
 0000007A  8B D0			mov edx, eax					; EDX = string1Length

					; get length of current word
 0000007C  53				push ebx						; push the start of the current word as parameter: inputSentenceIndex
 0000007D  E8 00000070			call wordLength					; currentWordLength (EAX) = wordLength(inputSentenceIndex)
 00000082  5B				pop ebx							; clear parameter off the stack
													
													; EDX = string2Length
 00000083  3B C2			cmp eax, edx					; if (string1Length != string2Length), then
 00000085  5A				pop edx							; (before we do anything, we need to restore EDX)
 00000086  75 12			jne wordsAreNotTheSame			; then the words are not the same.

					; compare current word to searchString
 00000088  8B C8			mov ecx, eax					; repeatCount = currentWordLength
 0000008A  FC				cld								; set scan direction: left-to-right
 0000008B  8B F3			mov esi, ebx					; set source index to inputSentenceIndex
 0000008D  8D 3D 000000C8 R		lea edi, searchString			; set destination index to first element of searchString
					
					; repe cmpsb means:
					; while (ECX != 0)
					;	compare [ESI] and [EDI]
					;	increment ESI and EDI
					;	decrement ECX
					;	if [ESI] and [EDI] are the same, then break loop
					; end while
 00000093  F3/ A6			repe cmpsb						; in summary, this will compare the searchString to the current word
													; in inputSentence (starting at inputSentenceIndex).
													; if ECX == 0, that means that the loop did not break early,
													; which means that the two words are the same.
					
 00000095  83 F9 00			cmp ecx, 0						; is ECX 0?
 00000098  74 13			je wordsAreTheSame				; if (ECX == 0), then the words are the same

 0000009A			wordsAreNotTheSame:
					; if the words are not the same, copy the current word from inputSentence to outputSentence

 0000009A  50				push eax						; parameter 3: length of word to copy
 0000009B  52				push edx						; parameter 2: outputSentenceIndex (destination)
 0000009C  53				push ebx						; parameter 1: inputSentenceIndex (source)

 0000009D  E8 00000071			call stringCopy					; copy current word into outputSentence

 000000A2  5B				pop ebx
 000000A3  5A				pop edx
 000000A4  58				pop eax

 000000A5  03 D0			add edx, eax					; outputSentenceIndex += currentWordLength
 000000A7  C6 02 20			mov BYTE PTR[edx], ' '			; insert ' ' into outputSentence
 000000AA  42				inc edx							; skip over space

 000000AB  EB 20			jmp endWordsAreTheSame
 000000AD			wordsAreTheSame:
					
					; if words are the same, copy replaceString into outputSentence

					; but first, we need to get the length of replaceString

 000000AD  50				push eax						; save currentWordSize, because we need to keep the length of
													; source word, for when we increment inputSentenceIndex.

 000000AE  8D 2D 000000DC R		lea ebp, replaceString			; get address of replaceString
 000000B4  55				push ebp
 000000B5  E8 00000038			call wordLength					; EAX = wordLength(replaceString)
 000000BA  5D				pop ebp

 000000BB  50				push eax						; parameter 3: length of word to copy
 000000BC  52				push edx						; parameter 2: outputSentenceIndex (destination)
					
 000000BD  55				push ebp						; parameter 1: address of replaceString (source)

 000000BE  E8 00000050			call stringCopy					; copy replaceString into outputSentence

 000000C3  5D				pop ebp							; pop parameters
 000000C4  5A				pop edx
 000000C5  58				pop eax

					; currentWordSize (EAX) still refers to the size of replaceString.
					; increment outputSentenceIndex (EDX) by that amount (+ 1 for space)

 000000C6  03 D0			add edx, eax					; outputSentenceIndex += currentWordLength
 000000C8  C6 02 20			mov BYTE PTR[edx], ' '			; insert ' ' into outputSentence
 000000CB  42				inc edx							; skip over space

 000000CC  58				pop eax

					; currentWordSize (EAX) now refers to the size of the current word in inputSentence.
					; this is necessary because we are still going to increment inputSentenceIndex by that amount
					; (+ 1 for space)

 000000CD			endWordsAreTheSame:
 000000CD  03 D8			add ebx, eax					; inputSentenceIndex += currentWordLength
 000000CF  43				inc ebx							; skip over space

 000000D0  EB 95			jmp whileNotAtNull				; loop back
 000000D2			endWhileNotAtNull:
					
					; Display results!

					output outputSentenceLabel, outputSentence

 000000EB  5D				pop ebp							; restore ebp to avoid windows32 bug

 000000EC  B8 00000000			mov     eax, 0  ; exit with return code 0
 000000F1  C3				ret
 000000F2			_MainProc ENDP


				; wordLength(stringAddr)
				; returns the length of a null terminated string
 000000F2			wordLength PROC
					
					; set wordStart to stringAddr
					; set wordEnd to stringAddr
					; while (byte at wordEnd != 0)
					;	increment wordEnd
					; end while
					; return (wordEnd - wordStart)
					
					; ebx = wordStart
					; ecx = wordEnd

 000000F2  55				push ebp						; save registers we're going to use
 000000F3  8B EC			mov ebp, esp					; copy stack index
 000000F5  53				push ebx
 000000F6  51				push ecx
 000000F7  9C				pushfd							; save flag register

 000000F8  8B 5D 08			mov ebx, DWORD PTR [ebp + 8]	; move stringAddr into wordStart
 000000FB  8B CB			mov ecx, ebx					; wordEnd = wordStart
 000000FD			whileNotWordEnd:						
 000000FD  80 39 00			cmp BYTE PTR[ecx], 0			; wordEnd == NULL?
 00000100  74 08			je endWhileNotWordEnd			; if so, end the while loop
 00000102  80 39 20			cmp BYTE PTR[ecx], ' '			; wordEnd == ' '?
 00000105  74 03			je endWhileNotWordEnd			; if so, end the while loop

 00000107  41				inc ecx							; if not, increment wordEnd
 00000108  EB F3			jmp whileNotWordEnd				; and repeat
 0000010A			endWhileNotWordEnd:
					
 0000010A  2B CB			sub ecx, ebx					; stringLength = wordEnd - wordStart
					
 0000010C  8B C1			mov eax, ecx					; move stringLength into EAX for return value

 0000010E  9D				popfd							; restore flag register
 0000010F  59				pop ecx							; restore registers we used
 00000110  5B				pop ebx
 00000111  5D				pop ebp
 00000112  C3				ret
 00000113			wordLength ENDP


				; stringCopy(sourceStringAddr, destStringAddr, lengthToCopy)
				; copies a string from once place to another
 00000113			stringCopy PROC
 00000113  55				push ebp						; save registers we're going to use
 00000114  8B EC			mov ebp, esp					; copy stack pointer
 00000116  56				push esi
 00000117  57				push edi
 00000118  51				push ecx
 00000119  9C				pushfd							; save flags register

 0000011A  8B 75 08			mov esi, DWORD PTR[ebp + 8]		; ESI = sourceStringAddr (1st parameter)
 0000011D  8B 7D 0C			mov edi, DWORD PTR[ebp + 12]	; EDI = destStringAddr (2nd parameter)
 00000120  8B 4D 10			mov ecx, DWORD PTR[ebp + 16]	; ECX = lengthToCopy (3rd parameter)

 00000123  FC				cld								; set scan direction: left-to-right

					; rep movsb means:
					; while (ECX != 0)
					;	copy byte at [ESI] to byte at [EDI]
					;	increment ESI and EDI
					;	decrement ECX
					; end while

 00000124  F3/ A4			rep movsb						; in short, copy lengthToCopy bytes from source string to dest. string

 00000126  9D				popfd							; restore flags register
 00000127  59				pop ecx							; restore registers we used
 00000128  5F				pop edi
 00000129  5E				pop esi
 0000012A  5D				pop ebp
 0000012B  C3				ret
 0000012C			stringCopy ENDP

				END   ; end of source code
Microsoft (R) Macro Assembler Version 11.00.50727.1	    11/17/16 20:34:38
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001DD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000012C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000F2 Public
  whileNotAtNull . . . . . . . .	L Near	 00000067 _TEXT	
  wordsAreNotTheSame . . . . . .	L Near	 0000009A _TEXT	
  wordsAreTheSame  . . . . . . .	L Near	 000000AD _TEXT	
  endWordsAreTheSame . . . . . .	L Near	 000000CD _TEXT	
  endWhileNotAtNull  . . . . . .	L Near	 000000D2 _TEXT	
stringCopy . . . . . . . . . . .	P Near	 00000113 _TEXT	Length= 00000019 Public
wordLength . . . . . . . . . . .	P Near	 000000F2 _TEXT	Length= 00000021 Public
  whileNotWordEnd  . . . . . . .	L Near	 000000FD _TEXT	
  endWhileNotWordEnd . . . . . .	L Near	 0000010A _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
inputSentence  . . . . . . . . .	Byte	 00000000 _DATA	
outputSentenceLabel  . . . . . .	Byte	 000001BD _DATA	
outputSentence . . . . . . . . .	Byte	 00000064 _DATA	
promptInputSentence  . . . . . .	Byte	 000000F0 _DATA	
promptReplaceString  . . . . . .	Byte	 00000179 _DATA	
promptSearchString . . . . . . .	Byte	 0000013C _DATA	
replaceString  . . . . . . . . .	Byte	 000000DC _DATA	
searchString . . . . . . . . . .	Byte	 000000C8 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
